/*
 * SPDX-FileCopyrightText: Copyright (c) 2019-2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
 * SPDX-License-Identifier: MIT
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#version 450 core
#pragma use_vulkan_memory_model
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_KHR_cooperative_matrix : enable
#extension GL_NV_cooperative_matrix2 : enable
#extension GL_EXT_shader_explicit_arithmetic_types : enable
#extension GL_EXT_buffer_reference : enable
#extension GL_EXT_bfloat16 : enable
#extension GL_EXT_float_e5m2 : enable
#extension GL_EXT_float_e4m3 : enable

// M/N/K values filled out at pipeline creation time
layout(constant_id = 0) const uint lM = 1;
layout(constant_id = 1) const uint lN = 1;
layout(constant_id = 2) const uint lK = 1;
layout(constant_id = 3) const uint TILE_M = 1;
layout(constant_id = 4) const uint TILE_N = 1;
layout(constant_id = 5) const uint TILE_K = 1;
layout(constant_id = 6) const uint K = 1;
layout(constant_id = 7) const uint strideA = 1;
layout(constant_id = 8) const uint strideB = 1;
layout(constant_id = 9) const uint strideC = 1;
layout(constant_id = 10)const uint strideD = 1;
layout(constant_id = 11)const float alpha = 1.0;
layout(constant_id = 12)const float beta = 1.0;
layout(constant_id = 13)const bool BColMajor = false;
// Size and number of rows in A matrix. equal to TILE_K,TILE_M (always row major)
layout(constant_id = 14)const uint A_ROW_LEN = 1;
layout(constant_id = 15)const uint A_NUM_ROWS = 1;
// Size and number of rows in B matrix. equal to TILE_N,TILE_K for row major and TILE_K,TILE_N for col major
layout(constant_id = 16)const uint B_ROW_LEN = 1;
layout(constant_id = 17)const uint B_NUM_ROWS = 1;
layout(constant_id = 19) const uint M = 1;
layout(constant_id = 20) const uint N = 1;

const int LayoutB = BColMajor ? gl_CooperativeMatrixLayoutColumnMajor : gl_CooperativeMatrixLayoutRowMajor;

// #defines set on command line:
// A_TYPE = e.g. float or float16_t
// C_TYPE = e.g. float or float16_t

// input bindings for A/B/C and the output
// bindings for A and B for uvec4/128-bit loads
layout(buffer_reference) buffer InputAV4 { uvec4 x[]; } inputAV4;
layout(buffer_reference) buffer InputBV4 { uvec4 x[]; } inputBV4;
layout(buffer_reference) buffer InputC { C_TYPE x[]; } inputC;
layout(buffer_reference) buffer Output { C_TYPE x[]; } outputO;
layout(set=0, binding=0, std430) uniform Params { InputAV4 inputAV4; InputBV4 inputBV4; InputC inputC; Output outputO; } params;

layout(local_size_x_id = 18, local_size_y = 1, local_size_z = 1) in;

void main()
{
    // compute position in grid
    uvec2 tileID = uvec2(gl_WorkGroupID.xy);

    InputAV4 inputAV4 = params.inputAV4;
    InputBV4 inputBV4 = params.inputBV4;
    InputC inputC = params.inputC;
    Output outputO = params.outputO;

    // Initialize result to zero
    coopmat<C_TYPE, gl_ScopeWorkgroup, TILE_M, TILE_N, gl_MatrixUseAccumulator> result;
    result = coopmat<C_TYPE, gl_ScopeWorkgroup, TILE_M, TILE_N, gl_MatrixUseAccumulator>(0.0);

    tensorLayoutNV<2> tensorLayoutA = createTensorLayoutNV(2);
    tensorLayoutNV<2> tensorLayoutB = createTensorLayoutNV(2);
    tensorLayoutNV<2> tensorLayoutC = createTensorLayoutNV(2);

    tensorLayoutA = setTensorLayoutDimensionNV(tensorLayoutA, M, K);
    tensorLayoutB = setTensorLayoutDimensionNV(tensorLayoutB, K, N);
    tensorLayoutC = setTensorLayoutDimensionNV(tensorLayoutC, M, N);

    tensorViewNV<2, false, 1, 0> tensorViewB = createTensorViewNV(2, false, 1, 0);

    if (BColMajor) {
        tensorLayoutB = setTensorLayoutDimensionNV(tensorLayoutB, N, K);
    }

    for (uint chunkK = 0; chunkK < K; chunkK += TILE_K) {

        coopmat<A_TYPE, gl_ScopeWorkgroup, TILE_M, TILE_K, gl_MatrixUseA> matA;
        coopMatLoadTensorNV(matA, inputAV4.x, 0, sliceTensorLayoutNV(tensorLayoutA, TILE_M * tileID.y, TILE_M, chunkK, TILE_K));

        coopmat<A_TYPE, gl_ScopeWorkgroup, TILE_K, TILE_N, gl_MatrixUseB> matB;
        if (BColMajor) {
            coopMatLoadTensorNV(matB, inputBV4.x, 0, sliceTensorLayoutNV(tensorLayoutB, TILE_N * tileID.x, TILE_N, chunkK, TILE_K), tensorViewB);
        } else {
            coopMatLoadTensorNV(matB, inputBV4.x, 0, sliceTensorLayoutNV(tensorLayoutB, chunkK, TILE_K, TILE_N * tileID.x, TILE_N));
        }

        result = coopMatMulAdd(matA, matB, result);
    }

    coopmat<C_TYPE, gl_ScopeWorkgroup, TILE_M, TILE_N, gl_MatrixUseAccumulator> matC;

    coopMatLoadTensorNV(matC, inputC.x, 0, sliceTensorLayoutNV(tensorLayoutC, TILE_M * tileID.y, TILE_M, TILE_N * tileID.x, TILE_N));

    result = C_TYPE(alpha) * result + C_TYPE(beta) * matC;

    coopMatStoreTensorNV(result, outputO.x, 0, sliceTensorLayoutNV(tensorLayoutC, TILE_M * tileID.y, TILE_M, TILE_N * tileID.x, TILE_N));
}
